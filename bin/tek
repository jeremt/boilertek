#!/usr/bin/env coffee

#
# Module dependencies
#

fs = require 'fs'
utils = require '../lib/utils'
Boilerplate = require '../lib/boilerplate'
install = require '../lib/install'
pkg = require '../package'

#
# The directory who contains all project templates
#

tmpl = __dirname + '/../templates/'

#
# Set the default template
#

template = 'default'

#
# Usage message to display
#

usage = """

►   \x1b[1mUsage\x1b[m tek [args]

    Simple script to easily generate project skeleton.

►   \x1b[1mOptions\x1b[m

    -t, --template <name>     The <name> of the template to use
    -o, --output <path>       The <path> to the output directory
    -V, --version             Display the version of tek
    -h, --help                Display usage informations
    -l, --libs <l1, l2...>    Load some libraries into your project

"""

#
# Simple error handling helpers
#

error = (msg) ->
  process.stderr.write "\n  \x1b[1mError\x1b[m #{msg}\n\n"
  process.exit 42

#
# Get the next arg or throw an error
#

required = (arg) ->
  if args.length
    return args.shift()
  else
    error "`#{arg}` require an argument."

#
# Get an array from given args
#

multi = ->
  arr = []
  while args.length and args[0][0] isnt '-'
    arr.push args.shift()
  arr

#
# Get options
#

args = process.argv.slice 2

path = null

unless args.length
  console.warn usage
  process.exit 42

while args.length
  switch arg = args.shift()
    when '-h', '--help'
      console.warn usage
      process.exit 42
    when '-t', '--template'
      template = required arg
    when '-o', '--output'
      path = required arg
    when '-V', '--version'
      console.log "#{pkg.name} #{pkg.version}"
      process.exit 42
    when '-l', '--libs'
      libs = multi()
    else
      error "Unknown argument #{arg}."

unless path
	error "path argument cannot be undefined."

tmpl += template

unless fs.existsSync tmpl
  error "#{template} template doesnt exists."

#
# Generate the boilerplate
#

console.log "\n►   \x1b[1mConfigure\x1b[m\n"

b = new Boilerplate tmpl, path

b.generate (l) ->

#
# Fetch libraries
#

  if libs

    if l then libs = libs.concat l

    console.log "\n►   \x1b[1mFetch libraries\x1b[m\n"
    for lib in libs
      console.log "  \x1b[1minstall\x1b[m #{lib}"
      p = lib.split '/'
      install p[0], p[1], path + "/libs"
  console.log()